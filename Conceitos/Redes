
Redes no Docker

Bridge

No Docker o modelo padrão que ele utiliza para o gerenciamento no networking dos containers é o modo bridge. Existe um isolamento entre a rede do host com as redes de dentro dos containers.

Aviso

Definindo configurações de conexão por meio de variáveis de ambiente Embora o uso de variáveis de ambiente para definir as configurações de conexão seja geralmente um problema para o desenvolvimento, ele é altamente desencorajado durante a execução de aplicativos em produção. Para entender o porquê, veja por que você não deve usar variáveis de ambiente para dados secretos. Um mecanismo mais seguro é usar o suporte de segredo fornecido pela estrutura de orquestração de contêiner. Na maioria dos casos, esses segredos são montados como arquivos no contêiner em execução. Você verá que muitos aplicativos (incluindo a imagem do MySQL e o aplicativo de tarefas) também dão suporte a env VARs com um _FILE sufixo para apontar para um arquivo que contém o arquivo. Por exemplo, definir o MYSQL_PASSWORD_FILE var fará com que o aplicativo use o conteúdo do arquivo referenciado como a senha de conexão. O Docker não faz nada para dar suporte a esses VARs de env. Seu aplicativo precisará saber procurar a variável e obter o conteúdo do arquivo.

Portas nos containers Docker

"portaHost:portaContainer"

Não usar as mesmas portas no container que está usando no host, exemplos:

"80:80"
"3306:3306"

Para criar o container precisará parar os serviços do host.

Mais tarde precisa do serviço no host e ele não starta devido o contaienr estar usando a porta.

Caso use laravel não use assim

"8000:80"

Pois por padrão o laravel usa a 8000

Use uma que não vai usar no host. Exemplo:

"8888:80"

Isso indica que a porta 80 do container será mapeada para a porta 8888 no host.

Se acessar em seu host

http://localhost:8888

Estará acessando o site do container na porta 80


docker network ls

docker network ls
NETWORK ID     NAME             DRIVER    SCOPE
c7a4606f76c4   bridge           bridge    local
c6c912ff7b73   host             host      local

A rede chamada bridge é uma rede especial. A menos que você diga o contrário, o Docker sempre inicia seus contêineres nesta rede.

docker network inspect bridge

docker network disconnect bridge networktest

docker network create -d bridge my_bridge

Adicionar containers para uma rede

docker run -d --net=my_bridge --name db training/postgres

docker inspect --format='{{json .NetworkSettings.Networks}}'  db

docker run -d -p 8081:8081 -e "port=8081" --name app --network=my-bridge-network selaworkshops/python-app:2.0

docker network     Manage networks

docker network connect multi-host-network container1

docker run -itd --network=multi-host-network busybox

docker network connect --ip 10.10.36.122 multi-host-network container2

docker network create -d bridge my-bridge-network

docker run -itd --network=mynet busybox

docker network create --driver=bridge --subnet=192.168.0.0/16 br0

docker inspect app

docker network connect my-bridge-network client

docker network disconnect my-bridge-network app

docker network rm my-bridge-network

docker network ls


Comandos de redes

Checar se a porta 3306 está aberta no host

netstat -vanp tcp | grep 3306

netstat -plnt | grep ':80'

netstat -plnt

To list all TCP or UDP ports that are being listened on, including the services using the ports and the socket status use the following command:

netstat -tunlp

netstat -tnlp | grep :22

ss -tunlp

lsof -nP -iTCP -sTCP:LISTEN

lsof -nP -iTCP:3306 -sTCP:LISTEN

Listar redes

docker network ls

Remover redes não usadas

docker network prune

Remover todas as redes com filtro

Remover todas as redes criadas há mais de 1 hora

docker network prune --filter "until=1h"

ENV IP docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' apache-container

RUN echo $IP

Checar a localização dos volumes:

docker inspect [container_name]

Checar se a porta 3306 está aberta no host

netstat -vanp tcp | grep 3306

netstat -plnt | grep ':80'

netstat -plnt

Para listar todas as portas que estão escutando, incluindo os serviços usando as portas e o estatus do socket use o comando:

netstat -tunlp

netstat -tnlp | grep :22

ss -tunlp

lsof -nP -iTCP -sTCP:LISTEN

lsof -nP -iTCP:3306 -sTCP:LISTEN

